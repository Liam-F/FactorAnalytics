library(factorAnalytics)
source('E:/returnAnalytics/returnanalytics/pkg/FactorAnalytics/R/fmmc.R', echo=TRUE)
library(factorAnalytics)
setwd("C:/Users/SonaliAndRohit/Desktop/fmmc_reproducable_04172015")
library(factorAnalytics)
.fmmc.proc
rm(list = ls())
fnames <- dir()
# Source definitions for risk and perf measures. "RiskAndPerformanceMeasures.R"
source(fnames[4])
# -------------------------------------------
# Part 1. Prepare the data for calculations
# -------------------------------------------
# Strategy data. We will use the EM strategy data. "StrategyReturns.csv"
strategy.data     <- read.csv(fnames[5],header=TRUE,stringsAsFactors=FALSE)
em.strategy.data  <- xts(strategy.data[,2,drop=FALSE],
order.by=as.Date(strategy.data[,1],format="%m/%d/%Y"))
# Assume we do not have returns until Aug 2003 just as in paper
em.strategy.data["/2003-08",] <- NA
# Convert factor returns data them to %. "FactorReturns.csv"
factors.data <- read.csv(fnames[1],header=TRUE,
stringsAsFactors=FALSE)
factors.data  <- 100*xts(factors.data[,-1],
order.by=as.Date(factors.data[,1],format="%m/%d/%Y"))
# -------------------------------------------
# Part 2. Use FMMC
# -------------------------------------------
# Create an fmmc object that can be used to calc risk and performance estimates
objs <- fmmc(em.strategy.data, factors.data, parallel=TRUE,
variable.selection="subsets")
# Part 2a.  Calc risk estimates and their standard errors
risk.measures <- sapply(c("vol", "down.vol", "VaR", "etl"), function(fun.str) {
ann.const <- ifelse(fun.str == "vol", sqrt(12), 1)
fun <- match.fun(fun.str)
100*ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(risk.measures) <- c("MFM estimate", "MFM SE")
colnames(risk.measures) <- c("Vol", "Down Vol", "VaR", "ETL")
# Part 2b.  Calc performance estimates and their standard errors
perf.measures <- sapply(c("sharpe", "sortino", "starr", "omega"), function(fun.str) {
ann.const <- ifelse(fun.str == "sharpe", sqrt(12), 1)
fun <- match.fun(fun.str)
ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(perf.measures) <- c("MFM estimate", "MFM SE")
colnames(perf.measures) <- c("Sharpe", "Sortino", "Starr", "Omega")
# -------------------------------------------
# Part 3. Verify the results for FMMC
# -------------------------------------------
risk.measures
perf.measures
objs
source('C:/Users/SonaliAndRohit/Desktop/fmmc_reproducable_04172015/fmmc.R', echo=TRUE)
objs <- fmmc(em.strategy.data, factors.data, parallel=TRUE,
variable.selection="subsets")
objs
objs <- fmmc(em.strategy.data, factors.data, parallel=TRUE,
variable.selection="subsets", nvmax=18)
debug(factorAnalytics:::.fmmc.proc)
objs <- fmmc(em.strategy.data, factors.data, parallel=TRUE,
variable.selection="subsets", nvmax=18)
library(debug)
install.packages("debug")
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
add.args
beta
beta
head(factors.data)
names.factors %in% names.beta
names.beta
library(factorAnalytics)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
debug(factorAnalytics:::.fmmc.proc)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
debug(factorAnalytics:::.fmmc.proc)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
library(factorAnalytics)
setwd("C:/Users/SonaliAndRohit/Desktop/fmmc_reproducable_04172015")
library(factorAnalytics)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
debug(factorAnalytics:::.fmmc.proc)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
names.factors %in% names.beta
names.factors
names.beta
beta
rownames(beta)
library(factorAnalytics)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets", nvmax=18)
objs
# Part 2a.  Calc risk estimates and their standard errors
risk.measures <- sapply(c("vol", "down.vol", "VaR", "etl"), function(fun.str) {
ann.const <- ifelse(fun.str == "vol", sqrt(12), 1)
fun <- match.fun(fun.str)
100*ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(risk.measures) <- c("MFM estimate", "MFM SE")
colnames(risk.measures) <- c("Vol", "Down Vol", "VaR", "ETL")
# Part 2b.  Calc performance estimates and their standard errors
perf.measures <- sapply(c("sharpe", "sortino", "starr", "omega"), function(fun.str) {
ann.const <- ifelse(fun.str == "sharpe", sqrt(12), 1)
fun <- match.fun(fun.str)
ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(perf.measures) <- c("MFM estimate", "MFM SE")
colnames(perf.measures) <- c("Sharpe", "Sortino", "Starr", "Omega")
# -------------------------------------------
# Part 3. Verify the results for FMMC
# -------------------------------------------
risk.measures
perf.measures
# Create an fmmc object that can be used to calc risk and performance estimates
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets")
# Part 2a.  Calc risk estimates and their standard errors
risk.measures <- sapply(c("vol", "down.vol", "VaR", "etl"), function(fun.str) {
ann.const <- ifelse(fun.str == "vol", sqrt(12), 1)
fun <- match.fun(fun.str)
100*ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(risk.measures) <- c("MFM estimate", "MFM SE")
colnames(risk.measures) <- c("Vol", "Down Vol", "VaR", "ETL")
# Part 2b.  Calc performance estimates and their standard errors
perf.measures <- sapply(c("sharpe", "sortino", "starr", "omega"), function(fun.str) {
ann.const <- ifelse(fun.str == "sharpe", sqrt(12), 1)
fun <- match.fun(fun.str)
ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(perf.measures) <- c("MFM estimate", "MFM SE")
colnames(perf.measures) <- c("Sharpe", "Sortino", "Starr", "Omega")
# -------------------------------------------
# Part 3. Verify the results for FMMC
# -------------------------------------------
risk.measures
perf.measures
debug(factorAnalytics:::.fmmc.proc)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets")
add.args[["nvmax"]]
variable.selection
(variable.selection == "subsets"  && is.na(add.args[["nvmax"]])
)
variable.selection == "subsets"  && is.na(add.args[["nvmax"]])
(variable.selection == "subsets")  && is.na(add.args[["nvmax"]])
(variable.selection == "subsets")
is.na(add.args[["nvmax"]])
add.args[["nvmax"]]
add.args[["nvmax"]]
floor((ncol(data) - 1)/2)
library(factorAnalytics)
objs <- fmmc(em.strategy.data, factors.data, parallel=FALSE,
variable.selection="subsets")
# Part 2a.  Calc risk estimates and their standard errors
risk.measures <- sapply(c("vol", "down.vol", "VaR", "etl"), function(fun.str) {
ann.const <- ifelse(fun.str == "vol", sqrt(12), 1)
fun <- match.fun(fun.str)
100*ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(risk.measures) <- c("MFM estimate", "MFM SE")
colnames(risk.measures) <- c("Vol", "Down Vol", "VaR", "ETL")
# Part 2b.  Calc performance estimates and their standard errors
perf.measures <- sapply(c("sharpe", "sortino", "starr", "omega"), function(fun.str) {
ann.const <- ifelse(fun.str == "sharpe", sqrt(12), 1)
fun <- match.fun(fun.str)
ann.const*fmmc.estimate.se(objs, fun=fun, se=TRUE, nboot=100, parallel=TRUE)
})
rownames(perf.measures) <- c("MFM estimate", "MFM SE")
colnames(perf.measures) <- c("Sharpe", "Sortino", "Starr", "Omega")
# -------------------------------------------
# Part 3. Verify the results for FMMC
# -------------------------------------------
risk.measures
perf.measures
library(factorAnalytics)
library(PerformanceAnalytics)
ES
ES.CornishFisher
